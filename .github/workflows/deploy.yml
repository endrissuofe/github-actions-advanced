name: Production Deployment Pipeline

# Trigger only on version tags for controlled releases
on:
  push:
    tags:
      - 'v*.*.*'

# Minimal permissions for security
permissions:
  contents: read
  deployments: write

jobs:
  # Reuse build logic with production optimizations
  build-for-production:
    name: Production Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        
      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Setup Node.js for production
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      # Install production dependencies only
      - name: Install production dependencies
        run: npm ci --only=production
        
      - name: Build optimized production bundle
        run: npm run build
        
      - name: Upload production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-release-${{ steps.extract_version.outputs.version }}
          path: dist/

  # Deploy to staging environment first
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build-for-production
    environment: staging
    steps:
      - name: Download production artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-release-${{ needs.build-for-production.outputs.version }}
          path: dist/
          
      - name: Deploy to staging server
        env:
          STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
          STAGING_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        run: |
          echo "Deploying version ${{ needs.build-for-production.outputs.version }} to staging"
          # Add actual deployment commands here
          echo "Staging deployment completed successfully"

  # Production deployment with manual approval
  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: [build-for-production, deploy-staging]
    environment: production # Requires manual approval
    steps:
      - name: Download production artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-release-${{ needs.build-for-production.outputs.version }}
          path: dist/
          
      - name: Deploy to production server
        env:
          PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
          PRODUCTION_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        run: |
          echo "Deploying version ${{ needs.build-for-production.outputs.version }} to production"
          # Add actual production deployment commands
          echo "Production deployment completed successfully"
          
      - name: Create deployment notification
        run: |
          echo "ðŸš€ Successfully deployed version ${{ needs.build-for-production.outputs.version }} to production"