name: Optimized CI Pipeline with Advanced Caching

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Parallel Job 1: Dependency Management and Caching
  dependency-management:
    name: Dependency Caching and Installation
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Generate cache key based on package files
      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}" >> $GITHUB_OUTPUT
        
      # Advanced caching with multiple restore keys
      - name: Cache Node.js dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            ~/.cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-
            deps-
            
      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      # Conditional installation based on cache hit
      - name: Install dependencies (cache miss)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - installing dependencies"
          npm ci
          
      - name: Verify installation (cache hit)
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          echo "Cache hit - verifying dependencies"
          npm ls --depth=0

  # Parallel Job 2: Multi-Environment Testing Matrix
  test-matrix:
    name: Cross-Platform Testing
    runs-on: ${{ matrix.os }}
    needs: dependency-management
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
        # Optimize matrix by excluding resource-intensive combinations
        exclude:
          - os: windows-latest
            node-version: 16
          - os: macos-latest
            node-version: 16
        # Include specific combinations for edge case testing
        include:
          - os: ubuntu-latest
            node-version: 21
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Use the same cache key pattern for consistency
      - name: Restore dependency cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: deps-${{ matrix.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            deps-${{ matrix.os }}-
            deps-
            
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      # Always install dependencies (may use cache)
      - name: Install dependencies
        run: npm ci
        
      - name: Run test suite
        run: npm test
        
      # Upload test results for aggregation
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
          path: coverage/

  # Parallel Job 3: Build Optimization
  optimized-build:
    name: Optimized Build Process
    runs-on: ubuntu-latest
    needs: dependency-management
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Restore cached dependencies
      - name: Restore dependency cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.dependency-management.outputs.cache-key }}
          
      # Cache build outputs for reuse
      - name: Cache build outputs
        uses: actions/cache@v3
        with:
          path: |
            dist/
            .build-cache/
          key: build-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-
            
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      # Install if not cached
      - name: Install dependencies
        run: npm ci
          
      - name: Build application with optimization
        run: |
          echo "Building with cache optimization..."
          npm run build
          
      - name: Generate build report
        run: |
          echo "Build completed at $(date)"
          echo "Cache hit: ${{ needs.dependency-management.outputs.cache-hit }}"
          du -sh dist/ || echo "Build directory size calculation failed"

  # Performance Monitoring and Reporting
  performance-analysis:
    name: Performance Analysis and Reporting
    runs-on: ubuntu-latest
    needs: [dependency-management, test-matrix, optimized-build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate performance report
        run: |
          echo "## Performance Analysis Report" >> performance-report.md
          echo "- **Cache Hit Rate**: ${{ needs.dependency-management.outputs.cache-hit }}" >> performance-report.md
          echo "- **Build Time Optimization**: Enabled" >> performance-report.md
          echo "- **Parallel Execution**: Multi-matrix testing completed" >> performance-report.md
          echo "- **Report Generated**: $(date)" >> performance-report.md
          
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-analysis
          path: performance-report.md